// Generated by CoffeeScript 1.6.1
(function() {
  var FunctionWords, dat, fs, fwords, path, walk, walker;

  fs = require('fs');

  walk = require('walk').walk;

  path = require('path');

  dat = path.join(__dirname, '..', 'dat');

  walker = walk(dat);

  FunctionWords = (function() {

    function FunctionWords() {}

    FunctionWords.prototype.total = function(lang) {
      var category, func, result, wordlist;
      result = [];
      if (lang) {
        result = result.concat.apply(result, (function() {
          var _ref, _results;
          _ref = this[lang];
          _results = [];
          for (func in _ref) {
            wordlist = _ref[func];
            _results.push(wordlist);
          }
          return _results;
        }).call(this));
      } else {
        for (lang in this) {
          category = this[lang];
          if (lang.length === 2) {
            result = result.concat.apply(result, (function() {
              var _ref, _results;
              _ref = this[lang];
              _results = [];
              for (func in _ref) {
                wordlist = _ref[func];
                _results.push(wordlist);
              }
              return _results;
            }).call(this));
          }
        }
      }
      return result;
    };

    return FunctionWords;

  })();

  fwords = new FunctionWords();

  walker.on('file', function(root, fileStats, next) {
    var file, keys, _name, _ref;
    keys = {
      lang: root.slice(dat.length + 1),
      func: fileStats.name.slice(0, fileStats.name.indexOf('.'))
    };
    if ((_ref = fwords[_name = keys.lang]) == null) {
      fwords[_name] = {};
    }
    file = fs.readFileSync(path.join(root, fileStats.name));
    fwords[keys.lang][keys.func] = file.toString().match(/[^\r\n]+/g);
    return next();
  });

  module.exports = function(cb) {
    return walker.on('end', function() {
      return cb(fwords);
    });
  };

}).call(this);
